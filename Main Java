import java.util.LinkedList;
import java.util.Queue;

public class Main {
    class No {
        String valor;
        No esquerda, direita;
        int fatordebalanceamento;

        public No(String valor) {
            this.valor = valor;
            esquerda = direita = null;
        }
    }

    public class arvore {

        No raiz;

        public void Arvore() {

            No NoA = new No("A");
            No NoB = new No("B");
            No NoC = new No("C");
            No NoD = new No("D");
            No NoE = new No("E");
            No NoF = new No("F");


            NoA.esquerda = NoB;
            NoA.direita = NoC;

            NoB.esquerda = NoD;
            NoB.direita = NoE;

            NoC.direita = NoF;

            raiz = NoA;
        }

        public class contadornos {

            public int contarnos (No node){

                if (node == null) return 0;
                return 1 + contarnos(node.esquerda) + contarnos(node.direita);

            }

        }



        public int contarNos(No node) {
            if (node == null) return 0;
            return 1 + contarNos(node.esquerda) + contarNos(node.direita);
        }

        public void buscaPreOrdem(No node) {
            if (node != null) {
                System.out.println(node.valor + " ");
                buscaPreOrdem(node.esquerda);
                buscaPreOrdem(node.direita);
            };
        }

        public void buscaPreOrdemNoRecu(No node, No inicio) {
            inicio = node;
            while (node.esquerda != null) {
                if (node.esquerda == null){
                    System.out.println(node.valor + " ");
                    inicio = node.direita;
                } else {
                    No prox = inicio.esquerda;
                    while (prox.direita != null && prox.direita != inicio) {
                        prox = prox.direita;
                    }
                    if (prox.direita == null) {
                        System.out.println(inicio.valor + " ");
                        prox.direita = inicio;
                        inicio = inicio.esquerda;
                    } else {
                        prox.direita = null;
                        inicio = inicio.direita;
                    }
                }
            }
        }

        public void buscaEmOrdem(No node) {
            if (node != null) {
                buscaEmOrdem(node.esquerda);
                System.out.println(node.valor + " ");
                buscaEmOrdem(node.direita);
            }
        }

        public void buscaPosOrdem(No node) {
            if (node != null) {
                buscaPosOrdem(node.esquerda);
                buscaPosOrdem(node.direita);
                System.out.println(node.valor + " ");
            }
        }

        public void buscaEmNivel() {
            if (raiz == null) return;


            Queue<No> fila = new LinkedList<>();
            fila.add(raiz);
            while (!fila.isEmpty()) {
                No atual = fila.poll();
                System.out.print(atual.valor + " ");

                if (atual.esquerda != null) fila.add(atual.esquerda);
                if (atual.direita != null) fila.add(atual.direita);
            }
        }

        public int contarNosFolha(No node) {
            if (node == null) return 0;
            if (node.esquerda == null && node.direita == null) return 1;
            return contarNosFolha(node.esquerda) + contarNosFolha(node.direita);
        }

        public int contarNosFolhaNaoRec(No node) {
            if (node == null) return 0;

            int contador = 0;
            Queue<No> fila = new LinkedList<>();
            fila.add(node);

            while (!fila.isEmpty()) {
                No atual = fila.poll();

                if (atual.esquerda == null && atual.direita == null) {
                    contador++;
                }
                if (atual.esquerda != null) fila.add(atual.esquerda);
                if (atual.direita != null) fila.add(atual.direita);
            }

            return contador;
        }

        public class arvoreAVL {

            class Node {
                int valor;
                Node esquerda, direita;
                int altura;

                Node(int valor) {
                    this.valor = valor;
                    altura = 1;
                }
            }

            private Node raiz;

            public int altura(Node h) {
                if (h == null) return 0;
                return h.altura;
            }

            public int fatorbalanceamento(Node h) {
                if (h == null) return 0;
                return altura(h.esquerda) + altura(h.direita);
            }

            public Node getMinValorNode(Node node) {
                Node atual = node;
                while (atual.esquerda != null) {
                    atual = atual.esquerda;
                } return atual;
            }

            public Node rotD(Node y) {
                Node x = y.esquerda;
                Node sec = x.direita;

                x.direita = y;
                y.esquerda = sec;

                x.altura = Math.max(altura(x.esquerda), altura(x.direita) + 1);
                y.altura = Math.max(altura(y.esquerda), altura(y.direita) + 1);

                return y;
            }

            public Node rotE(Node x) {
                Node y = x.esquerda;
                Node sec = y.direita;

                y.direita = x;
                x.esquerda = sec;

                x.altura = Math.max(altura(x.esquerda), altura(x.direita) + 1);
                y.altura = Math.max(altura(y.esquerda), altura(x.direita) + 1);

                return y;

            }

            public Node inserir(Node node, int l) {
                if (node == null){
                    return new Node(l);
                }

                if (l > node.valor) {
                    node.esquerda = inserir(node.esquerda, l);
                } else if (l < node.valor) {
                    node.direita = inserir(node.direita, l);
                }
                else {
                    return node;
                }

                node.altura = 1 + Math.max(altura(node.esquerda), altura(node.direita));

                int eql = fatorbalanceamento(node);

                if (eql > 1 && l < node.esquerda.valor) {
                    return rotD(node);
                }

                if (eql < -1 && l > node.direita.valor) {
                    return rotE(node);
                }

                if (eql < -1 && l < node.direita.valor) {
                    node.direita = rotD(node.direita);
                    return rotE(node);
                }

                if (eql > 1 && l > node.esquerda.valor) {
                    node.esquerda = rotE(node.esquerda);
                    return rotD(node);
                }

                return node;
            }

            

            public void buscarPreOrdem(Node node) {
                if (node != null){
                    System.out.println(node.valor + " ");
                    buscarPreOrdem(node.esquerda);
                    buscarPreOrdem(node.direita);
                }
            }

            public void inserir(int l) {
                raiz = inserir(raiz, l);
            }

            public void remover(int l) {
                raiz = remover(raiz, l);
            }

            public void mostrarPreOrdem() {
                buscarPreOrdem(raiz);
                System.out.println();
            }
        }

        public class ArvoreRubroNegra {

            private static final boolean VERMELHO = true;
            private static final boolean PRETO = false;

            private class No {
                int valor;
                No esquerda, direita;
                boolean cor;

                No(int valor) {
                    this.valor = valor;
                    this.cor = VERMELHO;
                }
            }

             private No raiz;

            private boolean ehVermelho(No no) {
                if (no == null) return false;
                return no.cor == VERMELHO;
            }

    }

}
