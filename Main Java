import java.util.LinkedList;
import java.util.Queue;

public class Main {
    class No {
        String valor;
        No esquerda, direita;

        public No(String valor) {
            this.valor = valor;
            esquerda = direita = null;
        }
    }

        public class arvore {

            No raiz;

        public void Arvore() {

            No NoA = new No("A");
            No NoB = new No("B");
            No NoC = new No("C");
            No NoD = new No("D");
            No NoE = new No("E");
            No NoF = new No("F");


            NoA.esquerda = NoB;
            NoA.direita = NoC;

            NoB.esquerda = NoD;
            NoB.direita = NoE;

            NoC.direita = NoF;

            raiz = NoA;
        }

            public class contadornos {

                public int contarnos (No node){

                    if (node == null) return 0;
                    return 1 + contarnos(node.esquerda) + contarnos(node.direita);

                }

            }



            public int contarNos(No node) {
            if (node == null) return 0;
            return 1 + contarNos(node.esquerda) + contarNos(node.direita);
        }

        public void buscaPreOrdem(No node) {
            if (node != null) {
                System.out.println(node.valor + " ");
                buscaPreOrdem(node.esquerda);
                buscaPreOrdem(node.direita);
            };
        }

        public void buscaPreOrdemNoRecu(No node, No inicio) {
            inicio = node;
                while (node.esquerda != null) {
                    if (node.esquerda == null){
                    System.out.println(node.valor + " ");
                    inicio = node.direita;
                    } else {
                        No prox = inicio.esquerda;
                        while (prox.direita != null && prox.direita != inicio) {
                            prox = prox.direita;
                        }
                        if (prox.direita == null) {
                            System.out.println(inicio.valor + " ");
                            prox.direita = inicio;
                            inicio = inicio.esquerda;
                        } else {
                            prox.direita = null;
                            inicio = inicio.direita;
                        }
                    }
                }
            }

        public void buscaEmOrdem(No node) {
            if (node != null) {
                buscaEmOrdem(node.esquerda);
                System.out.println(node.valor + " ");
                buscaEmOrdem(node.direita);
            }
        }

        public void buscaPosOrdem(No node) {
            if (node != null) {
                buscaPosOrdem(node.esquerda);
                buscaPosOrdem(node.direita);
                System.out.println(node.valor + " ");
            }
        }

        public void buscaEmNivel() {
            if (raiz == null) return;


            Queue<No> fila = new LinkedList<>();
            fila.add(raiz);
            while (!fila.isEmpty()) {
                No atual = fila.poll();
                System.out.print(atual.valor + " ");

                if (atual.esquerda != null) fila.add(atual.esquerda);
                if (atual.direita != null) fila.add(atual.direita);
            }
        }

            public int contarNosFolha(No node) {
                if (node == null) return 0;
                if (node.esquerda == null && node.direita == null) return 1;
                return contarNosFolha(node.esquerda) + contarNosFolha(node.direita);
            }

        }
}
